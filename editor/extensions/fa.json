{
    "alexa.accessAccount": "Access account: Username [USERNAME]   Passphrase [PASSPHRASE]",
    "alexa.acessCode": "Get Access Code",
    "alexa.age": "age",
    "alexa.band": "band",
    "alexa.command": "Command",
    "alexa.createAccount": "Create account: Username [USERNAME]   Passphrase [PASSPHRASE]",
    "alexa.location": "location",
    "alexa.messageAlexa": "Message Alexa: [MESSAGE]",
    "alexa.movie": "movie",
    "alexa.tellAlexaItsFavorite": "Tell Alexa its favourite [ATTRIBUTE] is [VALUE]",
    "alexa.tellAlexaMy": "Tell Alexa my [ATTRIBUTE] is [VALUE]",
    "alexa.tellAlexaMyCurrent": "Tell Alexa my current [ATTRIBUTE] is [VALUE]",
    "alexa.tellAlexaMyFavorite": "Tell Alexa my favourite [ATTRIBUTE] is [VALUE]",
    "cognimate.bored": "bored",
    "cognimate.endMission": "End current mission",
    "cognimate.happy": "happy",
    "cognimate.hello": "hello",
    "cognimate.hey": "hey",
    "cognimate.introduction": "Introduction",
    "cognimate.missionNumber": "Mission number",
    "cognimate.sad": "sad",
    "cognimate.say": "Say",
    "cognimate.setvoice": "Set voice to [VOICE]",
    "cognimate.shocked": "shocked",
    "cozmo.connect": "Connect to robot",
    "cozmo.forward": "Forward",
    "cozmo.hello": "hello",
    "cozmo.look": "Look [EMOTION]",
    "cozmo.pickUpBlock": "Pick up block",
    "cozmo.reverse": "Reverse",
    "cozmo.setDownBlock": "Set down block",
    "cozmo.speak": "Speak",
    "cozmo.stop": "Stop",
    "cozmo.turn": "Turn [ANGLE] degrees",
    "ergo.addRobotIP": "add your robot IP here",
    "ergo.base": "base",
    "ergo.connect": "Connect Ergo",
    "ergo.curious": "curious",
    "ergo.rest": "rest",
    "ergo.setMotors": "Set motors [MOTORS] to color [COLOR]",
    "ergo.setPosture": "Set posture",
    "ergo.setRobotIP": "Set robot IP address",
    "ergo.tetris": "tetris",
    "ergo.turnTo": "Turn to [DIRECTION]",
    "ev3.beepNote": "beep note [NOTE] for [TIME] secs",
    "ev3.buttonPressed": "button [PORT] pressed?",
    "ev3.getBrightness": "brightness",
    "ev3.getDistance": "distance",
    "ev3.getMotorPosition": "motor [PORT] position",
    "ev3.motorSetPower": "motor [PORT] set power [POWER] %",
    "ev3.motorTurnClockwise": "motor [PORT] turn this way for [TIME] seconds",
    "ev3.motorTurnCounterClockwise": "motor [PORT] turn that way for [TIME] seconds",
    "ev3.whenBrightnessLessThan": "when brightness < [DISTANCE]",
    "ev3.whenButtonPressed": "when button [PORT] pressed",
    "ev3.whenDistanceLessThan": "when distance < [DISTANCE]",
    "feelings.feelings": "Feelings",
    "feelings.getFeeling": "What is the feeling of the text",
    "feelings.whenNegative": "When text is negative",
    "feelings.whenNeutral": "When text is neutral",
    "feelings.whenPositive": "When text is positive",
    "gdxfor.down": "down",
    "gdxfor.getAcceleration": "acceleration [DIRECTION]",
    "gdxfor.getForce": "force",
    "gdxfor.getSpin": "spin [DIRECTION]",
    "gdxfor.getTilt": "tilt [TILT]",
    "gdxfor.isFacing": "facing [FACING]?",
    "gdxfor.isFreeFalling": "falling?",
    "gdxfor.moved": "moved",
    "gdxfor.pulled": "pulled",
    "gdxfor.pushed": "pushed",
    "gdxfor.shaken": "shaken",
    "gdxfor.startedFalling": "started falling",
    "gdxfor.tiltDirectionMenu.back": "back",
    "gdxfor.tiltDirectionMenu.front": "front",
    "gdxfor.tiltDirectionMenu.left": "left",
    "gdxfor.tiltDirectionMenu.right": "right",
    "gdxfor.up": "up",
    "gdxfor.whenForcePushedOrPulled": "when force sensor [PUSH_PULL]",
    "gdxfor.whenGesture": "when [GESTURE]",
    "general.addCategory": "add category here",
    "general.back": "back",
    "general.blue": "blue",
    "general.center": "center",
    "general.cyan": "cyan",
    "general.false": "false",
    "general.front": "front",
    "general.green": "green",
    "general.insertText": "insert text",
    "general.key": "key",
    "general.left": "left",
    "general.off": "off",
    "general.on": "on",
    "general.pause": "pause",
    "general.pink": "pink",
    "general.play": "play",
    "general.red": "red",
    "general.resume": "resume",
    "general.right": "right",
    "general.start": "start",
    "general.stop": "stop",
    "general.true": "true",
    "general.white": "white",
    "general.yellow": "yellow",
    "general.yourTextHere": "your text here",
    "hue.brightness": "brightness",
    "hue.changeLightProperty": "Change light [INDEX] [PROPERTY] by [VALUE]",
    "hue.color": "color",
    "hue.saturation": "saturation",
    "hue.setLightColor": "Set light [INDEX] color to [VALUE]",
    "hue.setLightProperty": "Set light [INDEX] [PROPERTY] to [VALUE]",
    "hue.smartLights": "Smart Lights",
    "hue.turnLightOnOff": "Turn light [INDEX] [VALUE]",
    "makeymakey.downArrow": "down arrow",
    "makeymakey.downArrowShort": "down",
    "makeymakey.leftArrow": "left arrow",
    "makeymakey.leftArrowShort": "left",
    "makeymakey.rightArrow": "right arrow",
    "makeymakey.rightArrowShort": "right",
    "makeymakey.spaceKey": "space",
    "makeymakey.upArrow": "up arrow",
    "makeymakey.upArrowShort": "up",
    "makeymakey.whenKeyPressed": "when [KEY] key pressed",
    "makeymakey.whenKeysPressedInOrder": "when [SEQUENCE] pressed in order",
    "microbit.buttonsMenu.any": "any",
    "microbit.clearDisplay": "clear display",
    "microbit.defaultTextToDisplay": "Hello!",
    "microbit.displaySymbol": "display [MATRIX]",
    "microbit.displayText": "display text [TEXT]",
    "microbit.gesturesMenu.jumped": "jumped",
    "microbit.gesturesMenu.moved": "moved",
    "microbit.gesturesMenu.shaken": "shaken",
    "microbit.isButtonPressed": "[BTN] button pressed?",
    "microbit.isTilted": "tilted [DIRECTION]?",
    "microbit.pinStateMenu.off": "off",
    "microbit.pinStateMenu.on": "on",
    "microbit.tiltAngle": "tilt angle [DIRECTION]",
    "microbit.tiltDirectionMenu.any": "any",
    "microbit.tiltDirectionMenu.back": "back",
    "microbit.tiltDirectionMenu.front": "front",
    "microbit.tiltDirectionMenu.left": "left",
    "microbit.tiltDirectionMenu.right": "right",
    "microbit.whenButtonPressed": "when [BTN] button pressed",
    "microbit.whenGesture": "when [GESTURE]",
    "microbit.whenPinConnected": "when pin [PIN] connected",
    "microbit.whenTilted": "when tilted [DIRECTION]",
    "muse.blink": "When I blink",
    "muse.connect": "Connect Muse",
    "muse.getSignal": "Get value of [TEXT]?",
    "muse.leftEar": "left ear",
    "muse.leftSensor": "left sensor",
    "muse.rightEar": "right ear",
    "muse.rightSensor": "right sensor",
    "music.categoryName": "Music",
    "music.changeTempo": "change tempo by [TEMPO]",
    "music.drumBass": "(2) Bass Drum",
    "music.drumBongo": "(13) Bongo",
    "music.drumCabasa": "(15) Cabasa",
    "music.drumClaves": "(9) Claves",
    "music.drumClosedHiHat": "(6) Closed Hi-Hat",
    "music.drumConga": "(14) Conga",
    "music.drumCowbell": "(11) Cowbell",
    "music.drumCrashCymbal": "(4) Crash Cymbal",
    "music.drumCuica": "(18) Cuica",
    "music.drumGuiro": "(16) Guiro",
    "music.drumHandClap": "(8) Hand Clap",
    "music.drumOpenHiHat": "(5) Open Hi-Hat",
    "music.drumSideStick": "(3) Side Stick",
    "music.drumSnare": "(1) Snare Drum",
    "music.drumTambourine": "(7) Tambourine",
    "music.drumTriangle": "(12) Triangle",
    "music.drumVibraslap": "(17) Vibraslap",
    "music.drumWoodBlock": "(10) Wood Block",
    "music.getTempo": "tempo",
    "music.instrumentBass": "(6) Bass",
    "music.instrumentBassoon": "(14) Bassoon",
    "music.instrumentCello": "(8) Cello",
    "music.instrumentChoir": "(15) Choir",
    "music.instrumentClarinet": "(10) Clarinet",
    "music.instrumentElectricGuitar": "(5) Electric Guitar",
    "music.instrumentElectricPiano": "(2) Electric Piano",
    "music.instrumentFlute": "(12) Flute",
    "music.instrumentGuitar": "(4) Guitar",
    "music.instrumentMarimba": "(19) Marimba",
    "music.instrumentMusicBox": "(17) Music Box",
    "music.instrumentOrgan": "(3) Organ",
    "music.instrumentPiano": "(1) Piano",
    "music.instrumentPizzicato": "(7) Pizzicato",
    "music.instrumentSaxophone": "(11) Saxophone",
    "music.instrumentSteelDrum": "(18) Steel Drum",
    "music.instrumentSynthLead": "(20) Synth Lead",
    "music.instrumentSynthPad": "(21) Synth Pad",
    "music.instrumentTrombone": "(9) Trombone",
    "music.instrumentVibraphone": "(16) Vibraphone",
    "music.instrumentWoodenFlute": "(13) Wooden Flute",
    "music.midiPlayDrumForBeats": "play drum [DRUM] for [BEATS] beats",
    "music.midiSetInstrument": "set instrument to [INSTRUMENT]",
    "music.playDrumForBeats": "play drum [DRUM] for [BEATS] beats",
    "music.playNoteForBeats": "play note [NOTE] for [BEATS] beats",
    "music.restForBeats": "rest for [BEATS] beats",
    "music.setInstrument": "set instrument to [INSTRUMENT]",
    "music.setTempo": "set tempo to [TEMPO]",
    "pen.categoryName": "Pen",
    "pen.changeColorParam": "change pen [COLOR_PARAM] by [VALUE]",
    "pen.changeHue": "change pen color by [HUE]",
    "pen.changeShade": "change pen shade by [SHADE]",
    "pen.changeSize": "change pen size by [SIZE]",
    "pen.clear": "erase all",
    "pen.colorMenu.brightness": "brightness",
    "pen.colorMenu.color": "color",
    "pen.colorMenu.saturation": "saturation",
    "pen.colorMenu.transparency": "transparency",
    "pen.penDown": "pen down",
    "pen.penUp": "pen up",
    "pen.setColor": "set pen color to [COLOR]",
    "pen.setColorParam": "set pen [COLOR_PARAM] to [VALUE]",
    "pen.setHue": "set pen color to [HUE]",
    "pen.setShade": "set pen shade to [SHADE]",
    "pen.setSize": "set pen size to [SIZE]",
    "pen.stamp": "stamp",
    "speech.defaultWhenIHearValue": "let''s go",
    "speech.extensionName": "Speech to Text",
    "speech.getLatestSpeech": "Get latest speech",
    "speech.listenAndWait": "listen and wait",
    "speech.speechReporter": "speech",
    "speech.speechToText": "Speech to Text",
    "speech.startSpeechRecognition": "Start listening",
    "speech.stopSpeechRecognition": "Stop listening",
    "speech.whenIHear": "when I hear [PHRASE]",
    "speech.whenIHearPhrase": "When I hear",
    "text.categoryName": "category name",
    "text.classifyText": "What kind of phrase is [TEXT]?",
    "text.getClassifier": "Choose text model",
    "text.getScore": "How sure are you the text is a [CLASS]?",
    "text.modelName": "model name",
    "text.phrase": "phrase",
    "text.setCategory": "Set category to train",
    "text.setReadAPI": "Set Read API key to",
    "text.setUsername": "Set username to",
    "text.setWriteAPI": "Set Write API key to",
    "text.textTraining": "Text Training",
    "text.trainText": "Send texts [TEXT] to train",
    "text.whenText": "When text is a [CLASS]?",
    "text2speech.alto": "alto",
    "text2speech.defaultTextToSpeak": "hello",
    "text2speech.giant": "giant",
    "text2speech.kitten": "kitten",
    "text2speech.setLanguageBlock": "set language to [LANGUAGE]",
    "text2speech.setVoiceBlock": "set voice to [VOICE]",
    "text2speech.speakAndWaitBlock": "speak [WORDS]",
    "text2speech.squeak": "squeak",
    "text2speech.tenor": "tenor",
    "text2speech.text2speech": "Text to Speech",
    "translate.categoryName": "Translate",
    "translate.defaultTextToTranslate": "hello",
    "translate.translateBlock": "translate [WORDS] to [LANGUAGE]",
    "translate.viewerLanguage": "language",
    "twitter.getTopTweet": "Most [CATEGORY] tweet containing #[HASH]",
    "twitter.latestUserTweet": "Get the latest tweet from @[USER]",
    "twitter.popular": "popular",
    "twitter.recent": "recent",
    "videoSensing.categoryName": "Video Sensing",
    "videoSensing.direction": "direction",
    "videoSensing.motion": "motion",
    "videoSensing.off": "off",
    "videoSensing.on": "on",
    "videoSensing.onFlipped": "on flipped",
    "videoSensing.setVideoSource": "set video source to [SOURCE]",
    "videoSensing.setVideoTransparency": "set video transparency to [TRANSPARENCY]",
    "videoSensing.sprite": "sprite",
    "videoSensing.stage": "stage",
    "videoSensing.videoOn": "video [ATTRIBUTE] on [SUBJECT]",
    "videoSensing.videoToggle": "turn video [VIDEO_STATE]",
    "videoSensing.whenMotionGreaterThan": "when video motion > [REFERENCE]",
    "vision.addLink": "add link here",
    "vision.addPhoto": "Add photo to [LABEL]",
    "vision.choosePreTrained": "Choose pre-trained model",
    "vision.clearResults": "Clear results",
    "vision.getModelfromString": "Choose image model",
    "vision.howSure": "How sure are you the photo is a [CLASS]?",
    "vision.modelId": "model id",
    "vision.searchImage": "Search image using link",
    "vision.searchPrediction": "Search prediction for your photo",
    "vision.setAPI": "Set API key to",
    "vision.takePhoto": "Take photo from webcam",
    "vision.video": "turn video [VIDEO_STATE]",
    "vision.visionTraining": "Vision Training",
    "vision.whatDoYouSee": "What do you see in the photo?",
    "vision.whenImageIs": "When image is [LABEL]",
    "wedo2.getDistance": "distance",
    "wedo2.getTiltAngle": "tilt angle [TILT_DIRECTION]",
    "wedo2.isTilted": "tilted [TILT_DIRECTION_ANY]?",
    "wedo2.motorDirection.backward": "that way",
    "wedo2.motorDirection.forward": "this way",
    "wedo2.motorDirection.reverse": "reverse",
    "wedo2.motorId.a": "motor A",
    "wedo2.motorId.all": "all motors",
    "wedo2.motorId.b": "motor B",
    "wedo2.motorId.default": "motor",
    "wedo2.motorOff": "turn [MOTOR_ID] off",
    "wedo2.motorOn": "turn [MOTOR_ID] on",
    "wedo2.motorOnFor": "turn [MOTOR_ID] on for [DURATION] seconds",
    "wedo2.playNoteFor": "play note [NOTE] for [DURATION] seconds",
    "wedo2.setLightHue": "set light color to [HUE]",
    "wedo2.setMotorDirection": "set [MOTOR_ID] direction to [MOTOR_DIRECTION]",
    "wedo2.startMotorPower": "set [MOTOR_ID] power to [POWER]",
    "wedo2.tiltDirection.any": "any",
    "wedo2.tiltDirection.down": "down",
    "wedo2.tiltDirection.left": "left",
    "wedo2.tiltDirection.right": "right",
    "wedo2.tiltDirection.up": "up",
    "wedo2.whenDistance": "when distance [OP] [REFERENCE]",
    "wedo2.whenTilted": "when tilted [TILT_DIRECTION_ANY]",
    "wemo.turnOn": "Turn [TOGGLE]"
}